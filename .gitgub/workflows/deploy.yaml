name: Deploy to AWS Elastic Beanstalk

# [on push branches - main] => main 브랜치를 했을 떄 동작
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # OS 지정
    runs-on: ubuntu-latest

    # 동작할 작업 지정
    steps:
      - name: Checkout Code
        # 레포지토리의 최신 코드 가져오기
        uses: actions/Checkout@v3
      
      - name: Set up NodeJS
        # nodeJS 설치
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: npm i

      - name: Build Project
        run npm run build

      - name: Zip Artifact For Deployment
        # -r: 모든 하위 파일을 포함, deploy.zip 이름으로 압축
        run: zip -r deploy.zip

      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
        run:
          aws configure set region $AWS_REGION
          aws s3 cp deploy.zip s3://(생성한 s3 버켓 이름)/delpoy.zip

      - name: Deploy To AWS Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
        run:
          aws elasticbeanstalk create-application-version \
          --application-name "(생선한 ElasticBeansTalk 이름)" \
          --version-label $GITHUB_SHA \
          --source-bundle S3Bucket="(생성한 s3 버켓 이름)",S3Key="delpoy.zip"

          aws elasticbeanstalk update-environment \
            --application-name "nestjs-netflix" \
            --environment-name "nestjs-netflix-env" \
            --version-label $GITHUB_SHA
